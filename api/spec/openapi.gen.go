// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/trustbloc/vcs/pkg/restapi/v1/common"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./common.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
