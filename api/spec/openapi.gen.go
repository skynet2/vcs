// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/trustbloc/vcs/pkg/restapi/v1/common"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./common.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
