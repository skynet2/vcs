// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/trustbloc/vcs/pkg/restapi/v1/common"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"PXx6+N8AAAD//2ar6NWjlwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./common.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
