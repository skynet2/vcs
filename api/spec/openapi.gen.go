// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/trustbloc/vcs/pkg/restapi/v1/common"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+x9bXPjNpL/V0Hx/6/KTJUkeyfJ7q3uzTqSs9HdzNhre7x1lZlSwWRLQkwRDABaVqb8",
	"3a/wRIIkQFJ+mExu91UmJh4bv250N7pbn6OYbnOaQSZ4NP0c8XgDW6z+eRLHwPkVvYXsAnhOMw7yzwnw",
	"mJFcEJpF0+gdTSBFK8qQbo5Ue2Q7TKJRlDOaAxME1KhYNVsK2aw93NUGkG6BVAtEOC8gQTd7JOSnQmwo",
	"I79h2RxxYHfA5BRin0M0jbhgJFtHD6MoXmY0iz3rvVRNUEwzgUkm/4mRaooERTeACg6J/GfMAAtAGOWM",
	"0hWiK5RTzoFzOTFdoVvYoy0WwAhO0W4DGWLwawFc6CFjBglkguC0a3lLuM8JA74kHlIsMgFrYCiBjKpR",
	"JQFSsgJBtoCI3H5Ms4TL1chPZkxnPqJHkBN2TXTVPa57HP7BGawY8E3XmZomepQR2m1IvEExzlyS0xt5",
	"JCiDXW1O7qUgj2nuOd6z86vF2fuTtyNEVoioI4hxKkeXW1Gd7EFVqIpTApn4T0TFBtiOcBihi9N/fFhc",
	"nM69c6tlLfWffZuVXyz1XBR7BlPU+7UgDJJo+nOdOWoTfRpFgohU9vXxZTkwvfkFYhGNovuxwGsuB6Uk",
	"ib+7i6NPD6NoVuLyUmBR8PYGqhaIqyZtFuZl1zZpDFG6t2kGMM2drbWW17UvRVTm3dZZLjzYUP/gSljJ",
	"vkoO1Pi0vs1he+nbglzKwF3MSTKj2Yqs22ufL+ZIf0MsKFr/JqUa3Hu2bj540ZyS7BaSZUISDxrOGXDI",
	"hJa3JEO/7Pgr3fU1ogz9wmmWJq/0tl5Lym6xkKdGBGzVcDSDs1U0/bmNlc8Nojx8KvETYcbwXpHakrWk",
	"zSDIJ3CHc6KIenofb3C2hhP36pjRBC60GOi60kD3VSK9EBsU0wTQitGtZmiGqPxz6xxovpQIHwCesqUD",
	"oN4FD0RTxzihy9x+QdunkkDcL0ni3/+AfQ44YWejPwFOxWa2gfj2oK1tVD8Uy45BWRcXjEEmrsjWM+hM",
	"f0Tq5jQCv1JKNDdE0yjBAsayjfciC8hhLT0Q4ehjxAsl8j9G8lbTE8gPRY5wliBWZFKR6b9dzFQO1nyk",
	"66K6JpmimCL9IiOCYAFni/nsu+vZAJayPZDsgpzLZsF5gaUeZgbxaI4uUJYJCExS3wVWcEG35DfgaLfB",
	"At2SLJGHY3SKhYbtDmdCKhhoTe6U7nc9u/Sraikm22WCBfaBShNX7eycwdhiGRIkkYx+TOluIofW270E",
	"dkdiqVIJjjBHZ+eq5w6nKQiE8zwlsdpd++IrVwJZklOSeYg8k9+R/W7xaParWHa3AQbOnYfUkEhuDm0w",
	"NypwpR/hlQCGDPpWRZruEY7llpU46NXRtF61JObIl8Qc8bJgaXv5Hy7e2jXbhsh0lZePuy+M/qlINkFX",
	"+BY4yhnEck8xICp5w0y8gzS9zeiu1M1RjhneggA2QYsVuqGS/TsWqdirNRhmgDIqpGVwRxKpu2r13wgY",
	"O1K1C7mzHUlTa3WgWEE00JJk5h5FNIeMJGPbbGybTY+OuuhdrnSI9aOxd7ShaQLMhaBGrB4SVZuP1SVc",
	"MN3mw8Vb/0pKiC0FbPNUETbxaMvmY2nDVNDUWDTm325DUqgDMaZZnBaJNowIR9IeYTiWA09K9V2ZAXLg",
	"nNGVHILwcgfa6CjklVCkguRpfXqzMj+y1wxnImABGIaTxo1BiD1v1UtZBxyJDaPFeqPX7sDySv5/1dBh",
	"S2UmaUK4l3JWt5elPKlbyerGJhmSu2GIC8i5Qn8bwgmscJEKOV9d1sohvHRwNR0v0u5wWoAxpkt7qyH1",
	"Je6kiM7xrwVYU00zOBJSgsurztiIN1KYq2u2uBlzydWZUIvVlp7asGX2HRGbwHxyh8goxYiDkFdpUqgV",
	"5wzuCC24Q6nKRkRS0JA74AibrUl6189whIhA7z5cXiGiEAry/0lmV20XfVJftLn17PY9JOLqg6V4NZ9e",
	"yERP+f7sqsQKyVBNt9JX0iqlO+2wyBmMcXlhLTVOlDCVKr/3vK2QC0B/puUKr4ShwrA5RLUNuM9B3n7y",
	"TjTspzGdA5NiTx6Bkjx1EJsznaC5xqhiiqZLotc7UK5PfefDFub6ddqMJc+/ukXr69Pye+KaQwGD2Ro8",
	"o6jgwJY5yZaV4vZIreMHSlPAmcEpzyEmq70S+RsQG8kE5qZ1Np+75p66aOV60PniPcIplX0tT1k3n0Yt",
	"yZSnzMWTIY9cSnVCN3pNNTsgoEMOVP5bvfsdlUNU0JCJPVCXUauZLQI3vCPPjUSsxFKOuWSfFO7kFUAy",
	"rQrI42gIRuoZXFEbXRZ5TpngWr/56erqHP399ErJWPU/F5AQBrGYmGk52uK9PXr0jwt9co6OYAWq0hMl",
	"BSUoFMK5vOWUaik2QBja0hvJMv8sFVq//+zerwzUyGLFnqMUa2ajjEFqHBIrlAEkQzxr/oOza/nUAcfD",
	"jNF69/O5sRvqKHLZbA4rtTaaLRKvhMgLllMO3ca0b1qPCdFo5nJLh63lmHWes1zM+/0c3uFM5yDtz4O0",
	"lzuRJK94d+61zyqeN3Kuy91Xfet0ig51gskJDnR+Ue2glNP/fwaraBr9v6PqdebIPM0cNbZu3Jotmjv7",
	"cUnsodtQaPvnfbKfNd5IcZGtfRf2Bqc4Wyu9BCeJ1gGNPk9XIdND6pp+z3zi2Bp6CKnf0S0RUj3ley5g",
	"q705yl4z4qjHxKk86V2n5vMLP4yihG6x71Fmrv5+wL7vgJGVkZTvQGxogAQfLhaWAu0uWvpqndZHoRVh",
	"XCBI3nz//Z/+ivLiJiWxegqjKzRfzNErI7WVYqItrvli/rqPmg9BfFqQDYTomVSFzq1mzEMSQWkxctla",
	"N8oxYdy98ErdWtteBUkTYw5TBn7NFL26+HH2579899fXWsfQdFCdjJGlr3et5VqXj9Ku6uMp28/DJMZN",
	"4b8jzFcOMQO/nG5p7mGdeaiy2pA39RlGzoqb67NzOWKpeXADz/ucQY4ZKM+XFGUngWsrdC2Y/ki7zuQI",
	"DZPpcGekkQETKQO2NJvs8Tb1CoTaRHMzQMOmPtQAu1Z4VpbgDSjDVlD0MZIK3ceo21J6plP3vWgMOqXn",
	"OfF+7X/AkQdDF2pnHnbEaub/hjfYv87ntrv3VOozsQrIXTdMk4eU7sg3kCy9wx2+gfOTi+5lhxR7hjOu",
	"XXNoMVfRFUaJB1TkMd22bWv3kfMA1bIk1Sh0WB6NfxikhuKz4BsfZw8RRgXfNLBoOpfuj69DDIUeMUeB",
	"5bi07iHPAVSG5HDeV90G83tX0MwJ+q/Ls/coK7Y3ypWCBWJg7DpeD9Ux2pZVFKQC5kTZYI4wyikngtwB",
	"MlE1E3TV6FEF6HCEhRowIVxep8ZVEwqPQjeF0PqX2Ockxmm614880oa+g3SP+IYygV7BZD0ZoRsQO4AM",
	"fa/8BX8+PrYLfR2K/dHCpGAkFPlTbUKxvaS2dttTz6LLlxrKBSTGH65IJunESbZOYVxwFVEEDEzglqYv",
	"zyFWVKw5LNquV79rsVfSuFutRVQ18B0C5tAYnUtB2aPCFbig7NCHetnMe+s/iv/VaA45urcykNlDgxzw",
	"1P8YygwIYehZ2cD9fcilWdq0D4Pn3dm8hD4XrIiF9tbJDnL317NwmEM5nNed83Rzt8M9sZhHnvEdFHUT",
	"aCCVr3FK5DDn1YlBMpCx7nRf8zzUcnJLSZmTrE1VzwuLN8QKNUb0Klf2ZcCDCGlFmgV0s6pvQQ6he2n0",
	"dFr3X9KPJXb4LfIsV7iHsAHEfRd8SriKNmiswnQYPdZicsSlGeolTgAYWe0rlrEhPkXqAbpu7L5+l+93",
	"jlNkhUlaMDDxUka383nzIL71efJkL7VN7zEAY5S1u53KP6MtcI7X8Gi/17XTBm1Vo35e0RuxK/NO5B5c",
	"B8G7zkyPGji1Pq+2c2Lu6v7Avu0mBQ5zbnvp92jqD3Jw3zV556X928/kMH4IU22Iz7WTcEOkfClh6Moh",
	"Hu/DseQqXnNXHYImlym7go2DGzqQJG709BAJXHt+/8PI4E652eLOEE2eQNo+MVkjazfADhJT7hpKQTWq",
	"ve4+U0T9wQK3rfdVS+o8kseITB8dhghNd1UHi0316SuQm77NP4F+h8rOA7D9KOEZYtd+8end1UDKyNFI",
	"tqLaQ5EJHCuhCVtM0mgabSBN6d8EK7i4SWk8SeAuGkUZ3oLyNhdc/JDSGAnAW0kGFaITbYTI+fToqN5N",
	"IqPhrLbdr2eXiOtYGlfTKqNtpCXiUhwVXMrof347Q9ez8cn5wo2ZOsshW8y/u1budEFj6sYlHNmtu1Gs",
	"up8JdI5GUUpiMMAwOz3JcbyB8ZvJcWuTu91ugtXnCWXrI9OXH71dzE7fX57KPhNxr4/RPTWCb9Ja9KEN",
	"WX91Pbt8rbVgrgl1PJETK9UOMpyTaBp9OzlWa8mx2Ch8HbkJA9PP0RqEz18jCpZx668MpGVIJGMbJhP9",
	"HcRPztDVw5ia9s3xsUUO6PcNJ4zoSIrYKtW1jw18KRIKnw3x9t+KBXix3WK2L1Mr0Mysz59B8TCKjgwE",
	"nJPnRybAt7I71crH1oGQU5+/wibUeMMUm+6u8lWnTdsBCUjGy/QDTfbPRujeaR8eHh5e8KD785GGHPvj",
	"DsEBSGnEh7CR6+eqsYo6HSdYYIWS38bOM6EfIOahiyP1Uuh/6XZjH5zAqdpDYBsyZuTAw+5LoGXQm/IL",
	"I2bYw+EQ1AyNQzgIJwXfNORHL0I+mODLMmPJhPi4L78qOlp5ZJFwHnbVbVUHvWOfNOASeAV8Kaz0PDqG",
	"YdJ3bMEX20MOigvKDpP06t2BP1XO9z3OvMRRdM/5wvza81wzhFEfQ/lDsHCHUyJAJYzW3c49iLB+Yx70",
	"mRfOI0EdBwN8zi8Bhd5pXxgN/Y8UQwAxnPA9MDAZavzos/nXYv5w5HjGdDuFACe+8edA9pmNvlyoChbS",
	"7lVKeWUllZNErqdAsAJGDv2axu+nUQB/i2Z8tU/qUy4a4Z0vJfF9Uc7PAKeGm2UAPNRCHLI8FQRVtvjX",
	"iAL9UMtdazlkwEkwODgoy328BBq6349/F1x0UuoZEHL0Wf93MX/osrsZgTvgzdTbDqPbd2S/IxJH/qoJ",
	"ahTPJLz6ehDavzA4BhzMwRCpaRllRjklSfzVChMnP46U+XHETd5beP1yrg+NZKqwgwmnqz+o8FCqvq84",
	"VdlULkfl0LoKn5ul1uYbm9ZUMY/NNHyp68+fUvnCClUoc27QPdmXkxnCvETwUal2BWWd9ni8mRz77Wpb",
	"kcwchi4MopLwy+T6Zlq2GwhdP+4zksSlRtknH3sj9hWj/VoA21ec1gy6f4LAvKpy23W5tBXRtqJvXjel",
	"4wlznqDybQclwMgdJGUSqdabS3+4zf9XqakmktMbvjkyWbWmZ4LwWrK40GUPghuiCSyrh6Yn7kpHlug1",
	"73BVtEDv0aTV2smGLWmpx4wOPlNvKDAzmb/6YpGGyRivISurDujz/YaXDWuFV2xlhHSPgAt8kxIVTV2m",
	"hHunNFUVaiUU1oQLU0AkZ1TxF2W6JsEW39rmwShdP0foBZvg3AOJpesC1usd9kyo82YOA0hma1zotDM3",
	"AdzQRlC0xUQXidFlHmw8thtBrqrS4DS9wfGtvtq8pDflJ7iuT6HnNJUqzekaSjtAkEPW0aAnqKpNXP50",
	"9uHtvLwazfv6nRQdKs+Tcj7mRFSrXVG2BrYPErKMhXs8vm2mgbzZ72Cv4W3/hm9oIRqalG5hkvDKUlC6",
	"AOUEvbP1YAKTOJqBBr+q96iKPSzrFWzKE6udD8lQjPXzraf0DA9Ryp9ccRDl9GviN9w8R6IZzTKIhU1X",
	"/HDxVh+3LZJF0lRVwrDpBvQO2L5kWiXaBLAtycAh6DeSRDm+ISkRBLiCqxUifIIuTmdn796dvp+fziUl",
	"5vsMb0nsXq0X3aynZ1kaNeCRLKi8Mhvlzq6Q8O7kf9R2JfdV6QKW1UxND0G25DcoGecbrqpnMAJZDM+w",
	"OxXmu9GpSgcZPk69HXOT700tWmBKoJhjswWg4F7YTJKGFg1sgk6C9W3kdVylkuSYm1ozOPPW7SrFgL3g",
	"K12+orzJ82iV6XJL/6jKGLJLVQNHL7Ems9o7uarm3BZcIIFvlY1ApaSnRWaKDJWDEq5KI60LLBVAMLVp",
	"GVmTTH42+yDcDDpCMS3SREoEnCEshBTKgbN1Qn8fb39+e/ymQ2W/H+92u/GKsu24YClkUp1I6jq8PwGk",
	"4Ruw9W8914vSY9aQSZ23pzRzqLfSd3UGjU4/Svem2BxR6p4p+yWvQyLI2tpdjPBbKTVTwLeBssD+CHC7",
	"HVsO7KNu+DFyoCY1NlsExWia5lYOlCKSe4N7HAuDQ1MbytVl9Q3aHzJn4/D7XAU/0iJLGqaTspj6Xgur",
	"/KLSaMoxC78nzPTOOWSJfS7252lpTSLdt4qGWS1ESv81CN7Mf6tKREnuc+9UzNvJXTaTyxHLrKqYFc6s",
	"bVtm3gytw945DuaxgZUr/wX0mmCNyEC1Cq9p2h6kbsZNvw6Ds2eZ1rSbPoMh+djCfP9WFH5/RcFT48Gx",
	"Zaf/Ysb9F6x4cbAfYKi28W9D35+8uPEWm/jKbLLW0uvm5vQPb1L3Jbl3VPGpX7M+hbX9vvCnZw3jCuXW",
	"e3TlmSkE9jCKvjv+3hNPry/Z91SgkzSlO9P0T9/6K25KhJ9mgog9uqIUvcVsDarDm7/6ShlS9A5ne0t3",
	"7tPZA9Uohqjuh4QGnVoRr2re4yxJJf826oaWxTr9OnMzROblVOWuysrqVr4BBL8WOEUFy6YExGqqRBaf",
	"qqCrqeo/lv2nvmRnD38PStIeOFY4R7v80seADgGqeipurnY/yz3fk57vp2YCz3mSyzwxkz/gBFXvj20e",
	"CMBQA7UWO+fhA3u/hZ/95By2VZ0BSvvTecdtl2ySFzCVN14BiBasXpq4Km/bZhlbZLXv/c+pSFFFWzuR",
	"g6Enoqe9VVkvVJdD/ikeKq8MNQTxoMAhVsdplz8v1RGCxuvV0HVdcdlA2SC4/jtUZaFDm26hSh63vVXa",
	"Q6EVtw3mxp72/D5CRxGrNkKuzI88vZAg7TCsW9XxrZWtDRq3nLpb8nn4j695RWjAFdj2mh00z7LMGvNZ",
	"/WyfC7pmON8YK5ThLKFbpMdoVZevypKFCxMZnVkDqMs46LrJAlZLu+p+wIbpNhFb5/ux1qHl9TT2Q9Lj",
	"78C69D4xFed5uf7yd9Ymh91uRo7Vj/H/3BVXq5QelHCGymO96aPPRUGSh96UOQtK3astZ8ysZ+rzD/sP",
	"hQndODjToVleSE8ojdpCj+n55a3Oe092k+K2PqA/sKwoDow4kbOXOZX10LdmQoxTANvcKnUKqvy9UD2v",
	"FxLdJAn9lOJibuCkpKIuHpe1f/8iBpJr70HpGtiCwMqJXrmNr8/1YIe4Ni5F6dryi8dGiXZvxZY8tD27",
	"omrZNANEGdpSBshJUHVzi3kgS3ugEGnsr5DSQK7ye9/nH3X9hWYwr/HvlE7kWtH6WtCi9hHUkraVumt/",
	"DuZ6dukwk5sRHUT0Z3GvYoBTTLaOwGgKAh1SunB6qmSzp6bO1umjaiLqn8Nwqla4EayF5fNHxEz3kXkN",
	"Qk/uqGjGRamFbV77lSA/ofvimefKP1glvvlFlqps/3iR1RvlrSso9IfuznWNADXGC0XttuP6m+VTXiqu",
	"31vu56WzhkKlYQYlCzWLBQ3g9WeP5v7ikCjjgkkSO/Lni8Q+n38JTIR+tuJZhNpz3x1ePLmD/iGEi6sA",
	"vKh0adXG+SLyxVs75QAJk9fJE8CERcDVPocHPzB2kKZj9ct/RwlJxnH588SdZknVtG2SVD9y/IJUrCYZ",
	"lm9jY1nKHR5u0Nj0mCtt24aZ4erJMftlJk7yrFyniKK8LXp/VUWZ6dFRSmOcbigX0/84/stxJHnUUKi5",
	"Ou3DHGtHSqKL8DZerKqlmle19h4tVAeOUyLb4+tsl5Wp+rnlWB4+PfxvAAAA//90CmGxDoEAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./common.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
