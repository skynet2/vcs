// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/trustbloc/vcs/pkg/restapi/v1/common"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"NZUAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./common.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
