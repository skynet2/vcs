// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/trustbloc/vcs/pkg/restapi/v1/common"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./common.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
