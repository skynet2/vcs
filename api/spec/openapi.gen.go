// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/trustbloc/vcs/pkg/restapi/v1/common"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./common.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
