// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/trustbloc/vcs/pkg/restapi/v1/common"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./common.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
