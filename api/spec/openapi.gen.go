// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/trustbloc/vcs/pkg/restapi/v1/common"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./common.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
