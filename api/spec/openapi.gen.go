// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/trustbloc/vcs/pkg/restapi/v1/common"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AP//rt1FAdAIAQA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./common.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
