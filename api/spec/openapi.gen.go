// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/trustbloc/vcs/pkg/restapi/v1/common"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"/0tVk2yOfwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./common.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
