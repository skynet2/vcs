// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/trustbloc/vcs/pkg/restapi/v1/common"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"7IDXt92UqxrnN7N6+PnhfwMAAP//W1VBN1GXAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./common.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
