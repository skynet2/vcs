// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/trustbloc/vcs/pkg/restapi/v1/common"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./common.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
