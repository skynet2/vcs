// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/trustbloc/vcs/pkg/restapi/v1/common"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"H0gB39CZAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./common.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
