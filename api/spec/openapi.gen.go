// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/trustbloc/vcs/pkg/restapi/v1/common"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./common.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
