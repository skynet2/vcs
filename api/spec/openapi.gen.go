// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/trustbloc/vcs/pkg/restapi/v1/common"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"m38AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./common.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
