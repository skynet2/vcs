// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/trustbloc/vcs/pkg/restapi/v1/common"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./common.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
