// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/trustbloc/vcs/pkg/restapi/v1/common"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./common.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
