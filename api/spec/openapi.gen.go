// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/trustbloc/vcs/pkg/restapi/v1/common"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"Z3KNXA1Q28/8an58+PTwfwEAAP//4xl8eqSTAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./common.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
