// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/trustbloc/vcs/pkg/restapi/v1/common"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./common.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
