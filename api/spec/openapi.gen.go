// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/trustbloc/vcs/pkg/restapi/v1/common"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./common.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
