// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/trustbloc/vcs/pkg/restapi/v1/common"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./common.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
