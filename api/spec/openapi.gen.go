// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/trustbloc/vcs/pkg/restapi/v1/common"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./common.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
