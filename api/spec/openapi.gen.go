// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/trustbloc/vcs/pkg/restapi/v1/common"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./common.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
