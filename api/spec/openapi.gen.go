// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/trustbloc/vcs/pkg/restapi/v1/common"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./common.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
