// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/trustbloc/vcs/pkg/restapi/v1/common"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./common.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
