// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/trustbloc/vcs/pkg/restapi/v1/common"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"70Lu89OHp/8PAAD//wdiG5f4VAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./common.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
