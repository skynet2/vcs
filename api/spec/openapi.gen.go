// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/trustbloc/vcs/pkg/restapi/v1/common"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./common.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
