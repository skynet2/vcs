// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/trustbloc/vcs/pkg/restapi/v1/common"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"f9U/3n+4//8BAAD//6I9X40z2QAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./common.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
