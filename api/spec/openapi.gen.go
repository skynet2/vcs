// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/trustbloc/vcs/pkg/restapi/v1/common"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"eH3bzbiqcX4Tq4dPD/8bAAD//w8sRAOhlwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./common.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
