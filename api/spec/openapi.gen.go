// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/trustbloc/vcs/pkg/restapi/v1/common"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./common.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
