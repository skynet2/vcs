// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/trustbloc/vcs/pkg/restapi/v1/common"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"DcOHLQEA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./common.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
