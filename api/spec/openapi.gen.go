// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/trustbloc/vcs/pkg/restapi/v1/common"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./common.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
