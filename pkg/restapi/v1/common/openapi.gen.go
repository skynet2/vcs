// Package common provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package common

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Defines values for DIDMethod.
const (
	DIDMethodKey DIDMethod = "key"
	DIDMethodOrb DIDMethod = "orb"
	DIDMethodWeb DIDMethod = "web"
)

// Defines values for KMSConfigType.
const (
	KMSConfigTypeAws   KMSConfigType = "aws"
	KMSConfigTypeLocal KMSConfigType = "local"
	KMSConfigTypeWeb   KMSConfigType = "web"
)

// Defines values for VCFormat.
const (
	JwtVcJson VCFormat = "jwt_vc_json"
	LdpVc     VCFormat = "ldp_vc"
)

// Defines values for VPFormat.
const (
	JwtVp VPFormat = "jwt_vp"
	LdpVp VPFormat = "ldp_vp"
)

// Model to convey the details about the Credentials the Client wants to obtain.
type AuthorizationDetails struct {
	// String representing a format in which the Credential is requested to be issued. Valid values defined by OIDC4VC are jwt_vc_json and ldp_vc. Issuer can refuse the authorization request if the given credential type and format combo is not supported.
	Format *string `json:"format,omitempty"`

	// An array of strings that allows a client to specify the location of the resource server(s) allowing the Authorization Server to mint audience restricted access tokens.
	Locations *[]string `json:"locations,omitempty"`

	// String that determines the authorization details type. MUST be set to "openid_credential" for OIDC4VC.
	Type string `json:"type"`

	// String array denoting the types of the requested Credential.
	Types []string `json:"types"`
}

// DID method of the DID to be used for signing.
type DIDMethod string

// Model for KMS configuration.
type KMSConfig struct {
	// Prefix of database used by local kms.
	DbPrefix *string `json:"dbPrefix,omitempty"`

	// Type of database used by local kms.
	DbType *string `json:"dbType,omitempty"`

	// URL to database used by local kms.
	DbURL *string `json:"dbURL,omitempty"`

	// KMS endpoint.
	Endpoint *string `json:"endpoint,omitempty"`

	// Path to secret lock used by local kms.
	SecretLockKeyPath *string `json:"secretLockKeyPath,omitempty"`

	// Type of kms used to create and store DID keys.
	Type KMSConfigType `json:"type"`
}

// Type of kms used to create and store DID keys.
type KMSConfigType string

// Supported VC formats.
type VCFormat string

// Supported VP formats.
type VPFormat string

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/5xW0W/buA/+Vwg9bYCXFr/9nvLWc3ZA0PZWLGv2cBsKWaJjNbbkE+mkuaH/+4Fy3KSN",
	"e+jupagp8SP58ROZn8qEpg0ePZOa/lRkKmx0+vei4ypE97dmF/wMWbs62S2Sia4Vq5qq62CxBg5ggt/g",
	"DrhCsP1l0EXoOFnyiBY9O11T/1079Axb7ZnEORSsnZ+oTLUxtBjZYYpVhthoPo264Oj8CiK2EUmA/Qo0",
	"9LfBedhWzlQvIoMjiPhXh8RoJWiB4Ig6tBNY6tpZ2Oi6QwKLpfNoodjB5/ks//8yBx0R7rd8tzF39xQ8",
	"aG+htu3dxkxgLhgRjPYQsewIU1x9zN4QF1yZDldugx7MITXetZhA9yWY0BRBEvaBgbq2DZHRCj9yU00V",
	"JQLUY6bqYFKMkd5ceNAx6h2EEnoHYV8z6LoOWwINpu8DB6AWjSv7/g2Q4iffESl00SAQxg3Gd/S+RxDW",
	"5fyZUmCRLglm4zyD7qxDbxIKR2eEfG0MkjR+jZ6kKsfYpAJOytsbUh2H71f0kIqzyBgb55FGGjFIU2Am",
	"cH27+CoyIEwcfFehRe/s3aEz35W0ZNDBaAPEQK+m1DfAog880JUcDtwOijwo9VcYecyUQLiIVk3/7A+H",
	"nH5kih3Xcnv0MT9hheIeDQv4bD67Rq6CPS1oNp9Bk86G3MXSv6OOMGkXyK288yupAH3XSEohFipTW5S/",
	"a9ylrF7WdHm9yIMv3eq1ASPYl9cLmTKlW3Ux1XE6L2xxE7F0D6cwvV0yt5p1oWmfdLFLcq9h3dBoe23x",
	"dVRyYv1PcLdfrk7Rbr9cCZW/CIbetsH5kQEpXA2no66EJiJfBbO+xN2N5mqEMs1VGg3pqqSyfmNe/K+M",
	"rRvqcWRrRNTcjz7iEHtNrXFHxwpKwZ40pLc0oqGxd3Ck/4PAXoo+Uw8fWK9IvNI6iOrHY6aW+e+v7Z5h",
	"HMMy38/rZ9ke7QmVqX5LHKfyhDxC3PLmDVFvXo3aDgHbtwUU1pwvw0ivYkf8Wx0MLPPFsIGON5ZQpWWs",
	"S+s2GF3p9kujIxl03z7msMw/XNzMQdfBr2DruILPLfr5TDZqGwMHE/qX3fN+lmAwgvOMUZuElty+6brG",
	"pOPaGfSUxOV1kyZbq02FH/43OVeZ6mKtpqpibml6drbdbic6HU9CXJ3tfensap5/+mPxSXwm/JDm3sBV",
	"Hpom+P2IltSWqTRd1M9+SsiOcwbh3TJfvFeZ2mCknrjziWTymKVVolunpurj5Dwl12quSE19V9eP/wQA",
	"AP//+njpXngJAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
